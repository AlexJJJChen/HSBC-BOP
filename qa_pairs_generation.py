import pandas as pd
df=pd.read_excel('test case format.xlsx')

#a=f"客户提供的交易附言为：{交易附言}。请根据用户提供的交易附言，判断是否符合下面的格式要求：{格式要求}，若不符合要求，请按照格式要求对交易附言进行修改。"
# 单个产品名称 #位置交换 #缺少货款 
goods=['未去内壳的鲜椰子',
    '荞麦',
    '其他非种用蓖麻子',
    '钛矿砂及其精矿',
    '红瓜子',
    '原油',
    '液化天然气',
    '邻二甲苯',
    '针叶木木片或木粒',
    '用防腐剂处理的针叶木原木',
    '柚木原木',
    '光导纤维预制棒',
    '船用压燃式内燃发动机',
    '内燃发动机的进气过滤器',
    '飞机等用起落架及其零件',
    '苹果',
    '纸巾',
    '水下管道工程',
    '铝合金轨道',
    '红麻原木',
    '红豆',
    '凹凸棉布',
    '生鸡蛋',
    '不锈钢丝',
    '木炭',
    '含有铅的绝缘塑料',
    '大豆',
    '氟化氢',
    '用蒸汽加工的玻璃',
    '石墨电极',
    '含苯丙烯橡胶',
    '硅酸钠',
    '麦片',
    '油甘子',
    '其他中药材',
    '天然丁腈橡胶',
    '其他不含有激素的青鱼肝',
    '含金属的高分子材料',
    '切削油',
    '木浆',
    '油气水分离器',
    '生鸡肉',
    '硅铁',
    '未加工的食用菌',
    '石油焦',
    '未加工的新鲜蔬菜',
    '熟鸡蛋',
    '未加工的水果',
    '不锈钢盆',
    '纺织用蜡',
    '木工胶',
    '其他富含花青素的热带水果',
    '其他未加工的兽皮',
    '生鲜鱼',
    '其他未加工的禽肉',
    '其他食用香菇',
    '未经过预处理的铁矿',
    '未炼油的石油',
    '其他未加工的粮食',
    '其他未经研磨的豆类',
    '未经过加工的茶叶',
    '未经加工的咖啡豆',
    '未加工的核桃',
    '未经加工的开心果',
    '未加工的腰果',
    '其他未经加工的坚果',
    '未加工的夏威夷果',
    '未加工的松子',
    '未加工的枸杞',
    '未加工的花生',
    '未加工的大米',
    '未加工的哈尔滨冰糖梨',
    '人造黄鳝',
    '智能手环',
    '折叠自行车',
    '无人机配件',
    '新鲜荔枝',
    '太阳能充电板',
    '氢气燃料电池',
    '环保水瓶',
    '仿真植物',
    '潜水装备',
    '微型太阳能灯',
    '可降解塑料袋',
    '手工皂',
    '航天器零部件',
    '智能眼镜',
    '食用昆虫',
    '木制玩具',
    '健康检测仪器',
    '手工编织篮',
    '环保纸巾',
    '虚拟现实头盔',
    '有机咖啡豆',
    '生物降解塑料餐具',
    '天然橡胶',
    '可穿戴监测器',
    '农业机械零部件',
    '可持续发电装置',
    '艺术品复制品',
    '红外线热成像仪',
    '自动化家居设备',
    '可回收纸箱',
    '生态友好清洁剂',
    '无人驾驶汽车',
    '环保垃圾桶',
    '仿真肉制品',
    '航空模型',
    '生态园艺用具',
    '太阳能路灯',
    '无线充电器',
    '可降解植物肥料',
    '3D打印机零部件',
    '植物蛋白饮料',
    '可循环使用保温杯',
    '太阳能帐篷',
    '环保家具',
    '仿真宠物',
    '环保墙壁涂料',
    '食品安全检测设备',
    '可生物降解塑料袋',
    '生态友好运动器材',
    '可再生能源设备',
    '智能温控器',
    '环保纺织品',
    '可降解餐具',
    '太阳能冰箱',
    '绿色交通工具',
    '健康饮水机',
    '仿真珠宝',
    '智能农业设备',
    '生物降解清洁用品',
    '环保彩妆',
    '可循环使用雨伞',
    '智能床垫',
    '环保玩具',
    '水下摄像机',
    '可降解沐浴用品',
    '可持续种植器具',
    '智能健身器材',
    '仿真动物皮毛',
    '太阳能热水器',
    '环保瑜伽垫',
    '可循环使用购物袋',
    '生态友好家居用品',
    '智能废物分类系统',
    '仿真植物肥料',
    '可降解洗涤剂',
    '生物降解一次性餐具',
    '环保墙纸',
    '可再生能源发电设备',
    '智能空气净化器',
    '环保文具',
    '可降解洗发水',
    '生态友好家具',
    '智能环境监测器',
    '仿真植物营养液',
    '可降解牙刷',
    '生物降解厨房用具',
    '环保礼品',
    '可再生能源储存设备',
    '智能垃圾分类桶',
    '仿真水族箱',
    '可降解护肤品',
    '生态友好装饰品',
    '智能灌溉系统',
    '环保家用电器',
    '可循环使用咖啡杯',
    '生物降解湿巾',
    '可降解牙膏',
    '环保宠物用品',
    '智能能源管理系统',
    '仿真食物',
    '可再生能源发电装置',
    '生态友好浴室用品',
    '环保手工艺品',
    '可降解洗涤用品',
    '智能绿植种植器',
    '生物降解马桶纸',
    '环保床上用品',
    '可再生能源发电器',
    '智能污水处理系统',
    '仿真宠物玩具',
    '可降解沐浴露',
    '生态友好游戏玩具',
    '环保汽车零部件',
    '智能家居节能设备',
    '仿真水果蔬菜',
    '可降解洁面乳',
    '生物降解塑料包装',
    '环保婴儿用品',
    '智能节水器具',
    '仿真动物模型',
    '可再生能源发电机',
    '生态友好儿童玩具',
    '环保庭院装饰',
    '智能环境监控器',
    '仿真花草',
    '可降解日常用品',
    '生物降解厨房清洁剂',
    '环保户外运动用品',
    '智能太阳能系统',
    '仿真海洋生物']
follow_form_narratives = ["设计师服务费","广告投放费用","技术支持费","网络维护费","租赁费用","销售提成","市场调研费",
    "广告创意费","物流运输费","差旅费报销","会议宴请费","软件许可费","办公设备采购","法律咨询费","培训费用","研发成本支出",
    "技术许可费","水电费用","IT系统维护","财务审计费","保险费用","生产原料采购","仓储租金","人事招聘费","装修装饰费",
    "食品采购成本","会员费用","公关活动费","车辆维护费","行政管理费","税务咨询费","网络安全费用","工程施工费","机械设备租赁",
    "建筑材料采购","图书资料购买","医疗保健费","公共服务费","展览展示费","印刷制作费","酒店住宿费","电信费用","外包服务费",
    "劳务派遣费","生态环保费","环境评估费","办公用品购买","市场推广费","人员福利费","租车服务费","品牌推广费","设备维修费",
    "咨询顾问费","课程培训费","医疗器械采购","物业管理费","电力费用","装卸搬运费","运输保险费","公积金缴纳",
    "营销策划费","营业税金","网络营销费","包装材料费","市场调查费","节能环保费","车辆保险费","培训师费用","员工福利费",
    "技术服务费","机械设备购置","劳务费用","网络维护费","资金周转费","检测认证费","技术转让费",
    "废弃物处理费","保险理赔费","公共设施维护费","通讯费用","人力资源管理费","供水费用","加工制造费","财务服务费","试验检测费",
    "办公设备维修","信息咨询费","网络域名费","广告宣传费","法律服务费","人才招聘费","科研开发费","物流运输费用",
    "材料采购费","车辆运输费","公共交通费","设备租赁费","安全生产费","运输服务费","工程设计费","品质检测费","环境保护费",
    "保安服务费","汽车维修费","企业培训费","网络广告费","法律顾问费","项目管理费","试验设备租赁","网络空间租用","行政费用",
    "物流配送费","设备安装费","市场调查费用","技术咨询费","办公用品费","食品加工费","医疗保险费","租房服务费","招聘费用","燃料费用",
    "固定资产购置","维修服务费","包装服务费","环保设施维护","水费支出","物业租金","宣传推广费","试验费用","公共事业费",
    "技术支持费用","场地租金","会务费用","薪酬福利支出","劳务费","广告制作费","机票费用","产品开发费","技术培训费","专利费用",
    "装修费用","招标代理费","IT技术支持费","卫生保洁费","电器设备采购","维修保养费","网络传播费","服务费用","专业培训费",
    "租赁用车费","废料处理费","物业费用","市场推广费用","电脑维护费","项目咨询费","设备租用费","交通运输费","广告费用",
    "设计制作费","运输管理费","培训费支出","运输成本"]
special_case={"贸易便利试点", "高水平便利试点", "区域便利试点", "区域便利化试点", "特殊离岸", "特殊离岸转手", "境内仓单专卖",
              "非报关人", "特殊退汇", "前期费用", "退款", "支付机构外汇支付划转"}

conversation={}
conversations=[]
# narrative_format=""
# query_format=f"帮我判断下面的交易附言是否符合这个格式 “{narrative_format}”,并帮我输出正确的交易附言。"
for narrative in follow_form_narratives:
    query=f"这个是我的交易附言:{narrative}。"+"帮我判断一下我的交易附言是否符合下面的格式：follow form 。并帮我输出正确的交易附言。"
    conversation['query']=query
    conversation['response']=f"正确，最终交易附言为：{narrative}"
    conversations.append(conversation)
    conversation={}

for i in range(len(df)):
    narrative_format = " ".join(df["格式要求"][i].split("\n")) 
    query_format=f"帮我判断一下我的交易附言是否符合下面的格式：{narrative_format}。并帮我输出正确的交易附言。"
    if 'follow form' in df['格式要求'][i]:
        if 'follow form' == "".join(df["格式要求"][i].split("\n")) :
            continue
        else:
            if not pd.isna(df['错误案例'][i]):
                for narr in eval(df['微调数据'][i]):
                    if "出口需在附言最前端" in df['格式要求'][i]:
                        for good in goods:
                            narrative=f"出口{good}"
                            query=f"这个是我的交易附言:{narrative}。"+query_format
                            conversation['query']=query
                            conversation['response']=f"正确，最终交易附言为：{narrative}"
                            #print(conversation)
                            conversations.append(conversation)
                            conversation={}
                            for keys, values in eval(df['错误案例'][i]).items():
                                narrative=keys
                                true=values
                                query=f"这个是我的交易附言:{narrative}。"+query_format
                                conversation['query']=query
                                conversation['response']=f"错误，最终交易附言为：{true}"
                                #print(conversation)
                                conversations.append(conversation)
                                conversation={}
                    elif "不涉及我国" in df['格式要求'][i]:
                        narrative=narr
                        query=f"这个是我的交易附言:{narrative}。"+query_format
                        conversation['query']=query
                        conversation['response']=f"正确，最终交易附言为：{narrative}"
                        #print(conversation)
                        conversations.append(conversation)
                        conversation={}
                        for good in goods:
                            for keys, values in eval(df['错误案例'][i]).items():
                                narrative=keys
                                true=values
                                query=f"这个是我的交易附言:{narrative}。"+query_format
                                conversation['query']=query
                                conversation['response']=f"错误，最终交易附言为：{true}"
                                #print(conversation)
                                conversations.append(conversation)
                                conversation={}
                            
                    else:

                        query=f"这个是我的交易附言:{narrative}。"+query_format
                        conversation['response']=f"正确，最终交易附言为：{narrative}"
                        conversations.append(conversation)
                        conversation={}

                #print(df['错误案例'][i])
                #for keys, values in eval(df['错误案例'][i]).items():
                    #for good in goods:
                    #print(df['微调数据'][i], keys)

            
        #print(query_format)
    else:
        for good in goods:
            if df['微调数据'][i]:
                true=eval(df['微调数据'][i])[0]
                narrative=true
                query=f"这个是我的交易附言:{narrative}。"+query_format
                conversation['query']=query
                conversation['response']=f"正确，最终交易附言为：{true}"
                conversations.append(conversation)
                conversation={}
                for false in eval(df['微调数据'][i])[1:]:
                    narrative=false
                    query=f"这个是我的交易附言:{narrative}。"+query_format
                    conversation['query']=query
                    conversation['response']=f"错误，最终交易附言为：{true}"
                    conversations.append(conversation)
                    conversation={}

print(len(conversations))